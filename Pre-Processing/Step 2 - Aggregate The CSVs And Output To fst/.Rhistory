install.packages("swirl")
library("swirl")
swirl()
bye()
library("swirl")
swirl()
swirl()
?dir.create()
dir.create("testdir2", "testdir3", recursive = TRUE)
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
setwd("old.dir")
setwd(old.dir)
1:20
pi:10
15:1
?:
?':'
seq(1,20)
seq(0, 10, by=0.5)
seq(5,10, length=20)
seq(5,10, length=30)
my_seq <- seq(5,10, lenght=30)
my_seq<-seq(5,10, length = 30)
lenght(my_seq)
length(my_seq)
1:length(my_seq)
1
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
shiny::runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
shiny::runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
files = list.files(pattern="*.csv")
myfiles = do.call(rbind, lapply(files, function(x) read.csv(x, stringsAsFactors = FALSE)))
countyList <- myfiles[c(1,2)]
countyList$countyStates <- paste(countyList$County, countyList$State, sep=',')
View(countyList)
shiny::runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
shiny::runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
shiny::runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
output$pieChartAQI <- renderPlot({
ggplot(data = pieChartData()) + geom_bar(mapping= aes(x="", y=Days, fill=AQI), width = 1, stat="identity", color='black') + coord_polar("y", start=0) +
theme(axis.ticks=element_blank(),
axis.title=element_blank(),
axis.text.y=element_blank()) +
scale_y_continuous(labels=NULL) + ggtitle("AQI") + theme(plot.title = element_text(face = "bold"))
})
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
shiny::runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
shiny::runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
runApp('UicFiles/CS 424/Project1 Data/Project1_Source')
setwd("~/UicFiles/CS 424/Project2/source")
shiny::runApp()
runApp()
runApp()
runApp()
install.packages("promises")
setwd("~/UicFiles/CS 424/Project2/source")
shiny::runApp()
runApp()
install.packages("fst")
setwd("~/UicFiles/CS 424/Project2/Pre-Processing/Step 2 - Aggregate The CSVs And Output To Feather")
# Save the dataframe into a feather file format
# A file is outputed 'hourlyGasData.feather' into your current directory
write_fst(hourlyData, 'hourlyData.fst')
install.packages("fst")
######################################################################################################################################
# Authors: Rami Masoud, Jeet Roal, Mudit Kumar, Jonathan Munoz                                                                       #
# Class  : UIC CS 424, Spring 2019                                                                                                   #
# File   : (AggregateAndOutput.r) PreProcessing commands for project #2 Every Breath You Take                                        #
# About  : The CSV files taken off of the EPA website are very large and take sometime to process into a dataframe.                  #
#          By aggregating the files into 2 dataframes before hand then outputting into a feather format using the feather library,   #
#          we are able to decrease loading times by a considerable amount.                                                           #
#          Below you could follow the steps and instructions to use in your own R application.                                       #
######################################################################################################################################
# Libraries used in our preProcessing file include
library(readr)
library(fst)
# Import the csv file names that hold the data for "daily" recorded information
dailyFiles = list.files(pattern = "^daily.*")
# Combine all of the "daily" files into one data frame.
dailyData = do.call(rbind, lapply(dailyFiles, function(x) read_csv(x, col_names = TRUE)))
# Save the dataframe into a feather file format
# A file is outputed 'dailyData.feather' into your current directory
write_fst(dailyData, 'dailyData.fst')
# Import the csv file names that hold the data for "hourly gasses" recorded information
hourlyFiles = list.files(pattern = "^hourly.*")
# Combine all the files into one data frame.
hourlyData = do.call(rbind, lapply(hourlyFiles, function(x) read_csv(x, col_names = TRUE)))
dailyFiles = list.files(pattern = "^daily.*")
dailyData = do.call(rbind, lapply(dailyFiles, function(x) read_csv(x, col_names = TRUE)))
write_fst(dailyData, 'dailyData.fst')
hourlyFiles = list.files(pattern = "^hourly.*")
hourlyData = do.call(rbind, lapply(hourlyFiles, function(x) read_csv(x, col_names = TRUE)))
write_fst(hourlyData, 'hourlyData.fst')
